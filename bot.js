const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const PASSWORD = process.env.BOT_PASSWORD;
let pswd = '';

if (!PASSWORD) {
    console.error('–û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

const authorizedUsers = new Set();
let selectedSenderId = null;
let selectedReciverId = null;
let currentSn = null;

function cleanSN(str) {
    return !/[ `!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~]/.test(str);
  }

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    const keyboard = {
        keyboard: [
            [{ text: 'üì§ /torepair' }],
            [{ text: 'üì• /fromrepair' }],
            [{ text: 'üìã /show' }],
            [{ text: 'üìÅ /file' }],
        ],
        resize_keyboard: true,
        one_time_keyboard: true
    };

const getEmployees = async () => {
    try {
        const response = await axios.get('http://localhost:6000/api/employees');
        return response.data;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', err);
        return [];
    }
};

const getEquipmentToRepair = async () => {
    try {
        const response = await axios.get('http://localhost:6000/api/equipment/fromRepair');
        return response.data;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', err);
        return [];
    }
};

const getEquipment = async () => {
    try {
        const response = await axios.get('http://localhost:6000/api/equipment/show');
        return response.data;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', err);
        return [];
    }
};

const createFile = async () => {
    try {
        await axios.post('http://localhost:6000/api/equipment/createfile');
        return true;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err);
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
const sendEquipmentList = async (chatId, equipment, isFromRepair = false) => {
    if (equipment.length === 0) {
        return bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç.');
    }

    for (const item of equipment) {
        const message = `
*SN:* \`${item.sn}\`
*–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–º–æ–Ω—Ç:* \`${item.send_date}\`
*–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* \`${item.sender_fio || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`
*–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞ –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞:* \`${item.recive_date || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`
*–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π:* \`${item.reciver_fio || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`
*–°—Ç–∞—Ç—É—Å:* \`${item.status}\`
        `;

        if (isFromRepair) {
            const keyboard = {
                inline_keyboard: [
                    [{ text: '–ü—Ä–∏–Ω—è—Ç—å –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞', callback_data: `return_${item.sn}` }]
                ]
            };
            bot.sendMessage(chatId, message, { parse_mode: 'MarkdownV2', reply_markup: keyboard });
        } else {
            bot.sendMessage(chatId, message, { parse_mode: 'MarkdownV2' });
        }
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (authorizedUsers.has(chatId)) {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', {
            reply_markup: keyboard
        });
    } else{
    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:');
    }
});


bot.onText(/\/torepair/, async (msg) => {
    const chatId = msg.chat.id;

    if (!authorizedUsers.has(chatId)) {
        return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.');
    }

    const employees = await getEmployees();

    if (employees.length === 0) {
        return bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.');
    }

    const keyboard = employees.map(employee => [{ text: employee.fio, callback_data: `sender_${employee.id}` }]);

    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–º–æ–Ω—Ç:', {
        reply_markup: {
            inline_keyboard: keyboard,
        },
    });
});

bot.onText(/\/fromrepair/, async (msg) => {
    const chatId = msg.chat.id;

    if (!authorizedUsers.has(chatId)) {
        return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.');
    }

    const equipmentToRepair = await getEquipmentToRepair();
    await sendEquipmentList(chatId, equipmentToRepair, true);
});

bot.onText(/\/show/, async (msg) => {
    const chatId = msg.chat.id;

    if (!authorizedUsers.has(chatId)) {
        return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.');
    }

    const equipment = await getEquipment();
    await sendEquipmentList(chatId, equipment);
});

bot.onText(/\/file/, async (msg) => {
    const chatId = msg.chat.id;

    if (!authorizedUsers.has(chatId)) {
        return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.');
    }

    const filePath = './equipment_list.csv';

    const fileCreated = await createFile();
    if (!fileCreated) {
        return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
    }

    if (!fs.existsSync(filePath)) {
        return bot.sendMessage(chatId, '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    bot.sendDocument(chatId, filePath)
        .then(() => {
            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
            fs.unlinkSync(filePath);
        })
        .catch(err => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', err);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
        });
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('sender_')) {
        selectedSenderId = data.split('_')[1];
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:');
    } else if (data.startsWith('receiver_')) {
        const [employeeId, sn] = data.split('_').slice(1);
        selectedReciverId = employeeId;
        currentSn = sn;

        try {
            await axios.put(`http://localhost:6000/api/equipment/${currentSn}`, {
                recive_date: new Date().toLocaleDateString(),
                reciver_id: selectedReciverId,
                status: '–í–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞',
            });

            bot.sendMessage(chatId, `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å SN ${currentSn} –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞.`);

            selectedReciverId = null;
            currentSn = null;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
        }
    } else if (data.startsWith('return_')) {
        const sn = data.split('_')[1];

        const employees = await getEmployees();

        if (employees.length === 0) {
            return bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.');
        }

        const keyboard = employees.map(employee => [{ text: employee.fio, callback_data: `receiver_${employee.id}_${sn}` }]);

        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', {
            reply_markup: {
                inline_keyboard: keyboard,
            },
        });
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    if (text.startsWith('/')) {
        return;
    }

    if (text === PASSWORD) {
        pswd = text;
        authorizedUsers.add(chatId);
        bot.sendMessage(chatId, '–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.');
        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', {
            reply_markup: keyboard
        });
    } else if (selectedSenderId !== null) {
        const sn = text.trim();
        
        if (!sn || sn.length < 3 || !cleanSN(sn)) {
            return bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: SN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º!');
        }

        const send_date = new Date().toLocaleDateString();

        try {
            const response = await axios.post('http://localhost:6000/api/equipment', {
                sn,
                send_date,
                status: '–í —Ä–µ–º–æ–Ω—Ç–µ',
                sender_id: selectedSenderId,
            });

            selectedSenderId = null;

            bot.sendMessage(chatId, `–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —Å SN ${sn} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–º–æ–Ω—Ç ${send_date}.`);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', err);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.');
        }
    } else if(pswd !== PASSWORD){
        bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
    }
});