require('dotenv').config();
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });
const PASSWORD = process.env.BOT_PASSWORD;
if (!PASSWORD) {
  console.error('ERROR: BOT_PASSWORD is not set');
  process.exit(1);
}

const authorizedUsers = new Set();
let state = {
  senderId: null,
  serviceCompanyId: null,
  equipmentTypeId: null,
  receiverId: null,
  currentSn: null
};

/** –ü—Ä–æ—Å—Ç–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä */
function makeInlineKeyboard(items, prefix) {
  return {
    inline_keyboard: items.map(({ id, label }) => [{
      text: label,
      callback_data: `${prefix}_${id}${prefix === 'receiver' ? `_${state.currentSn}` : ''}`
    }])
  };
}

/** –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API / –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ */
async function handleError(chatId, err, context = '') {
  console.error(`Error in ${context}:`, err);
  const msg = err.response?.data?.message || err.response?.data?.error || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.';
  await bot.sendMessage(chatId, `‚ùå ${msg}`);
}

// --- API layer ---
const api = {
  base: axios.create({ baseURL: 'http://localhost:6000/api' }),

  getEmployees: () => api.base.get('/employees').then(r => r.data),
  getServiceCompanies: () => api.base.get('/service_company').then(r => r.data),
  getEquipmentTypes: () => api.base.get('/equipment_type').then(r => r.data),
  getEquipment: (path) => api.base.get(`/equipment${path || ''}`).then(r => r.data),
  createCsv: () => api.base.post('/equipment/createfile'),
  sendToRepair: (payload) => api.base.post('/equipment', payload),
  returnFromRepair: (sn, payload) => api.base.put(`/equipment/${sn}`, payload)
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
const mainKeyboard = {
  resize_keyboard: true,
  one_time_keyboard: true,
  keyboard: [
    [{ text: 'üì§ /torepair' }],
    [{ text: 'üì• /fromrepair' }],
    [{ text: 'üìã /show' }],
    [{ text: 'üìÅ /file' }]
  ]
};

// --- –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
bot.onText(/\/start/, msg => {
  const chatId = msg.chat.id;
  if (authorizedUsers.has(chatId)) {
    return bot.sendMessage(chatId, '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.', { reply_markup: mainKeyboard });
  }
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:');
});

bot.onText(/\/torepair/, async msg => {
  const chatId = msg.chat.id;
  if (!authorizedUsers.has(chatId)) return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. /start –¥–ª—è –≤—Ö–æ–¥–∞.');
  try {
    const list = await api.getEmployees();
    if (!list.length) return bot.sendMessage(chatId, '–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ.');
    const keyboard = makeInlineKeyboard(
      list.map(e => ({ id: e.id, label: e.fio })),
      'sender'
    );
    await bot.sendMessage(chatId, '–ö—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ä–µ–º–æ–Ω—Ç?', { reply_markup: keyboard });
  } catch (e) {
    await handleError(chatId, e, 'getEmployees');
  }
});

bot.onText(/\/fromrepair/, async msg => {
  const chatId = msg.chat.id;
  if (!authorizedUsers.has(chatId)) return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. /start –¥–ª—è –≤—Ö–æ–¥–∞.');
  try {
    const items = await api.getEquipment('/fromRepair');
    await sendList(chatId, items, true);
  } catch (e) {
    await handleError(chatId, e, 'getEquipment/fromRepair');
  }
});

bot.onText(/\/show/, async msg => {
  const chatId = msg.chat.id;
  if (!authorizedUsers.has(chatId)) return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. /start –¥–ª—è –≤—Ö–æ–¥–∞.');
  try {
    const items = await api.getEquipment('/show');
    await sendList(chatId, items);
  } catch (e) {
    await handleError(chatId, e, 'getEquipment/show');
  }
});

bot.onText(/\/file/, async msg => {
  const chatId = msg.chat.id;
  if (!authorizedUsers.has(chatId)) return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. /start –¥–ª—è –≤—Ö–æ–¥–∞.');
  const path = './equipment_list.csv';
  try {
    await api.createCsv();
    if (!fs.existsSync(path)) throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    await bot.sendDocument(chatId, path);
    fs.unlinkSync(path);
  } catch (e) {
    await handleError(chatId, e, 'createCsv or sendDocument');
  }
});

/** –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç */
async function sendList(chatId, equipment, isFromRepair = false) {
  if (!equipment.length) return bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.');
  for (const item of equipment) {
    const txt = `
*SN*: \`${item.sn}\`
*–¢–∏–ø*: \`${item.equipment_type || '‚Äî'}\`
*–°—Ç–∞—Ç—É—Å*: \`${item.status}\`
*–û—Ç–ø—Ä–∞–≤–ª–µ–Ω*: \`${item.send_date}\`
*–ü–æ–ª—É—á–∏–ª*: \`${item.reciver_fio || '‚Äî'}\`
`;
    const opts = { parse_mode: 'MarkdownV2' };
    if (isFromRepair) {
      state.currentSn = item.sn;
      Object.assign(opts, {
        reply_markup: makeInlineKeyboard(
          [{ id: item.sn, label: '–ü—Ä–∏–Ω—è—Ç—å –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞' }],
          'return'
        )
      });
    }
    await bot.sendMessage(chatId, txt, opts);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query ---
bot.on('callback_query', async query => {
  const chatId = query.message.chat.id;
  const [action, id, sn] = query.data.split('_');

  try {
    switch (action) {
      case 'sender':
        state.senderId = id;
        {
          const list = await api.getServiceCompanies();
          const keyboard = makeInlineKeyboard(
            list.map(s => ({ id: s.id, label: s.sc_name })),
            'sc'
          );
          await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é:', { reply_markup: keyboard });
        }
        break;

      case 'sc':
        state.serviceCompanyId = id;
        {
          const list = await api.getEquipmentTypes();
          const keyboard = makeInlineKeyboard(
            list.map(e => ({ id: e.id, label: e.equipment_name })),
            'et'
          );
          await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', { reply_markup: keyboard });
        }
        break;

      case 'et':
        state.equipmentTypeId = id;
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ SN (–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤):');
        break;

      case 'return':
        state.currentSn = id;
        {
          const list = await api.getEmployees();
          const keyboard = makeInlineKeyboard(
            list.map(e => ({ id: e.id, label: e.fio })),
            'receiver'
          );
          await bot.sendMessage(chatId, '–ö—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞?', { reply_markup: keyboard });
        }
        break;

      case 'receiver':
        state.receiverId = id;
        await api.returnFromRepair(sn, {
          recive_date: new Date().toISOString().split('T')[0],
          reciver_id: state.receiverId,
          status: '–í–µ—Ä–Ω—É–ª—Å—è –∏–∑ —Ä–µ–º–æ–Ω—Ç–∞'
        });
        await bot.sendMessage(chatId, `‚úî –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ ${sn} –ø—Ä–∏–Ω—è—Ç–æ.`);
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state.receiverId = state.currentSn = null;
        break;
    }
  } catch (e) {
    await handleError(chatId, e, `callback_${action}`);
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–∞—Ä–æ–ª—å –∏ SN) ---
bot.on('message', async msg => {
  const chatId = msg.chat.id;
  const text = msg.text?.trim();
  if (!text || text.startsWith('/')) return;

  if (text === PASSWORD && !authorizedUsers.has(chatId)) {
    authorizedUsers.add(chatId);
    return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.', { reply_markup: mainKeyboard });
  }

  if (state.senderId) {
    // –ü—Ä–∏—ë–º SN
    if (text.length < 3 || /\s|[^\w-]/.test(text)) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SN. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.');
    }
    try {
      await api.sendToRepair({
        sn: text,
        send_date: new Date().toISOString().split('T')[0],
        status: '–í —Ä–µ–º–æ–Ω—Ç–µ',
        sender_id: state.senderId,
        sc_id: state.serviceCompanyId,
        equipment_type_id: state.equipmentTypeId
      });
      await bot.sendMessage(chatId, `‚úî SN ${text} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–º–æ–Ω—Ç.`);
    } catch (e) {
      const serverMsg =
      e.response?.data?.message ||
      e.response?.data?.error ||
      e.response?.data?.detail ||
      '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      await bot.sendMessage(chatId, `‚ùå ${serverMsg}`);
    } finally {
      state.senderId = null;
      state.serviceCompanyId = null;
      state.equipmentTypeId = null;
    }
  } else if (!authorizedUsers.has(chatId)) {
    bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
  }
});
